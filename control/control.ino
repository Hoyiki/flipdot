#include <Wire.h>
#include <avr/pgmspace.h>

//rs485
int txden = 8;

//three ultrasonic sensors
#define trigPin1 3
#define echoPin1 2
#define trigPin2 4
#define echoPin2 5
#define trigPin3 7
#define echoPin3 12
long duration, distance, RightSensor,MiddleSensor,LeftSensor;

byte a_stripes[] = {0x80, 0x83, 0x00, 0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F};
byte b_stripes[] = {0x80, 0x83, 0x01, 0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F};

byte c_stripes[] = {0x80, 0x83, 0x02, 
0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f
,0x8F};

byte d_stripes[] = {0x80, 0x83, 0x03, 
0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f
,0x8F};

int eye_delay_list[15] = {111, 94, 81, 69, 61, 54, 51, 50, 51, 54, 61, 69, 81, 94, 111};


const byte all_frames[15][4][32] PROGMEM =
{{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x1f,0xe,0x6,0x2,0x1,0x1,0x3,0x7,0xf,0x1f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7c,0x38,0x30,0x20,0x40,0x40,0x60,0x70,0x78,0x7c,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x1f,0xf,0x6,0x2,0x2,0x1,0x1,0x3,0x7,0xf,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7c,0x78,0x30,0x20,0x20,0x40,0x40,0x60,0x70,0x78,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x1f,0xf,0x7,0x2,0x2,0x2,0x1,0x5,0xb,0x17,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7c,0x78,0x70,0x20,0x20,0x20,0x40,0x50,0x68,0x74,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x1f,0xf,0x7,0x3,0x2,0x2,0x2,0x5,0xd,0x1b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7c,0x78,0x70,0x60,0x20,0x20,0x20,0x50,0x58,0x6c,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x1f,0xf,0x7,0x3,0x3,0x2,0x2,0x6,0xd,0x1d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x7f,0x7c,0x78,0x70,0x60,0x60,0x20,0x20,0x30,0x58,0x5c,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x1f,0xf,0x7,0x3,0x3,0x3,0x2,0x6,0xe,0x1d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x7c,0x78,0x70,0x60,0x60,0x60,0x20,0x30,0x38,0x5c,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x1e,0xf,0x7,0x3,0x3,0x3,0x3,0x6,0xe,0x1e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3f,0x3c,0x78,0x70,0x60,0x60,0x60,0x60,0x30,0x38,0x3c,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x1e,0xe,0x7,0x3,0x3,0x3,0x3,0x7,0xe,0x1e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3c,0x38,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x3c,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x1e,0xe,0x6,0x3,0x3,0x3,0x3,0x7,0xf,0x1e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3c,0x38,0x30,0x60,0x60,0x60,0x60,0x70,0x78,0x3c,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x1d,0xe,0x6,0x2,0x3,0x3,0x3,0x7,0xf,0x1f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5c,0x38,0x30,0x20,0x60,0x60,0x60,0x70,0x78,0x7c,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x1d,0xd,0x6,0x2,0x2,0x3,0x3,0x7,0xf,0x1f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5c,0x58,0x30,0x20,0x20,0x60,0x60,0x70,0x78,0x7c,0x7f,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x1b,0xd,0x5,0x2,0x2,0x2,0x3,0x7,0xf,0x1f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6c,0x58,0x50,0x20,0x20,0x20,0x60,0x70,0x78,0x7c,0x7f,0x7f,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x17,0xb,0x5,0x1,0x2,0x2,0x2,0x7,0xf,0x1f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x74,0x68,0x50,0x40,0x20,0x20,0x20,0x70,0x78,0x7c,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0xf,0x7,0x3,0x1,0x1,0x2,0x2,0x6,0xf,0x1f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x78,0x70,0x60,0x40,0x40,0x20,0x20,0x30,0x78,0x7c,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x1f,0xf,0x7,0x3,0x1,0x1,0x2,0x6,0xe,0x1f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7c,0x78,0x70,0x60,0x40,0x40,0x20,0x30,0x38,0x7c,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}}}
;

const byte all_frames_blink[7][4][32] PROGMEM =
{{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x1e,0xe,0x7,0x3,0x3,0x3,0x3,0x7,0xe,0x1e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3c,0x38,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x3c,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x3f,0x5f,0x6f,0x77,0x7b,0x7b,0x7d,0x1d,0xd,0x6,0x2,0x2,0x2,0x2,0x6,0xd,0x1d,0x7d,0x7b,0x7b,0x77,0x6f,0x5f,0x3f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7e,0x7d,0x7b,0x77,0x6f,0x6f,0x5f,0x5c,0x58,0x30,0x20,0x20,0x20,0x20,0x30,0x58,0x5c,0x5f,0x6f,0x6f,0x77,0x7b,0x7d,0x7e,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x3f,0x3f,0x5f,0x6f,0x77,0x77,0x7b,0x1b,0xb,0x5,0x1,0x1,0x1,0x1,0x5,0xb,0x1b,0x7b,0x77,0x77,0x6f,0x5f,0x3f,0x3f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7e,0x7e,0x7d,0x7b,0x77,0x77,0x6f,0x6c,0x68,0x50,0x40,0x40,0x40,0x40,0x50,0x68,0x6c,0x6f,0x77,0x77,0x7b,0x7d,0x7e,0x7e,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x3f,0x3f,0x3f,0x5f,0x6f,0x6f,0x77,0x17,0x7,0x3,0x3,0x3,0x3,0x3,0x3,0x7,0x17,0x77,0x6f,0x6f,0x5f,0x3f,0x3f,0x3f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7e,0x7e,0x7e,0x7d,0x7b,0x7b,0x77,0x74,0x70,0x60,0x60,0x60,0x60,0x60,0x60,0x70,0x74,0x77,0x7b,0x7b,0x7d,0x7e,0x7e,0x7e,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x5f,0x5f,0x6f,0xf,0xf,0x7,0x7,0x7,0x7,0x7,0x7,0xf,0xf,0x6f,0x5f,0x5f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x78,0x78,0x70,0x70,0x70,0x70,0x70,0x70,0x78,0x78,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x5f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x5f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7d,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7c,0x7d,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}}}
;

const byte all_frames_blink_new[5][4][32] PROGMEM =
{{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x1e,0xe,0x7,0x3,0x3,0x3,0x3,0x7,0xe,0x1e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3c,0x38,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x3c,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x1f,0x2f,0x37,0x5b,0x5d,0x6d,0x6e,0xe,0x6,0x7,0x7,0x7,0x7,0x7,0x7,0x6,0xe,0x6e,0x6d,0x5d,0x5b,0x37,0x2f,0x1f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3c,0x38,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x3c,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x1f,0x2f,0x37,0x3b,0x3d,0x3d,0x3e,0x3e,0x3e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3e,0x3e,0x3e,0x3d,0x3d,0x3b,0x37,0x2f,0x1f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7d,0x7b,0x77,0x6f,0x5f,0x5f,0x3f,0x3c,0x38,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x3c,0x3f,0x5f,0x5f,0x6f,0x77,0x7b,0x7d,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x5f,0x6f,0x77,0x7b,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7b,0x77,0x6f,0x5f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7c,0x7a,0x76,0x6e,0x5d,0x5d,0x3d,0x3b,0x3b,0x73,0x63,0x63,0x63,0x63,0x73,0x3b,0x3b,0x3d,0x5d,0x5d,0x6e,0x76,0x7a,0x7c,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}},{{0x80,0x83,0x00,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F},{0x80,0x83,0x01,0x7f,0x3f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x3f,0x7f,0x8F},{0x80,0x83,0x02,0x7f,0x7e,0x7c,0x79,0x73,0x67,0x4f,0x4f,0x1f,0x1f,0x1f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x1f,0x1f,0x1f,0x4f,0x4f,0x67,0x73,0x79,0x7c,0x7e,0x7f,0x8F},{0x80,0x83,0x03,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x8F}}}
;

//ultrasonic sensor
int URPWM = 3; // PWM Output 0－25000US，Every 50US represent 1cm
int URTRIG=5; // PWM trigger pin
int Distance=0;

//flow control
int prev_state = 0; //-2:very left, -1:middle left, 0: middle, 1:middle right, 2:very right
int current_state = 0; //-2:very left, -1:middle left, 0: middle, 1:middle right, 2:very right
//frame code: 14 11 7 3 0
int state_position_list[5] = {14, 11, 7, 3, 0};

void write_frame(int i)
{
  byte one_frame[4][32] = {{}};
  for (int r = 0; r < 4; r ++){
    for (int l = 0; l < 32; l ++){
      one_frame[r][l] = pgm_read_byte(&all_frames[i][r][l]);
    }
  }
  Serial.write(one_frame[0], 32);
  Serial.write(one_frame[1], 32);
  Serial.write(one_frame[2], 32);
  Serial.write(one_frame[3], 32);
}

void write_frame_blink(int i)
{
  byte one_frame[4][32] = {{}};
  for (int r = 0; r < 4; r ++){
    for (int l = 0; l < 32; l ++){
      one_frame[r][l] = pgm_read_byte(&all_frames_blink[i][r][l]);
    }
  }
  Serial.write(one_frame[0], 32);
  Serial.write(one_frame[1], 32);
  Serial.write(one_frame[2], 32);
  Serial.write(one_frame[3], 32);
}

void write_frame_blink_new(int i)
{
  byte one_frame[4][32] = {{}};
  for (int r = 0; r < 4; r ++){
    for (int l = 0; l < 32; l ++){
      one_frame[r][l] = pgm_read_byte(&all_frames_blink_new[i][r][l]);
    }
  }
  Serial.write(one_frame[0], 32);
  Serial.write(one_frame[1], 32);
  Serial.write(one_frame[2], 32);
  Serial.write(one_frame[3], 32);
}

void write_white(){
  Serial.write(a_stripes, 32);
  Serial.write(b_stripes, 32);
  Serial.write(c_stripes, 32);
  Serial.write(d_stripes, 32);
}

void PWM_Mode_Setup()
{ 
  pinMode(URTRIG,OUTPUT);                     // A low pull on pin COMP/TRIG
  digitalWrite(URTRIG,HIGH);                  // Set to HIGH
  pinMode(URPWM, INPUT);                      // Sending Enable PWM mode command
}

void setup() 
{
  Serial.begin(9600);
  pinMode(txden, OUTPUT);
  digitalWrite(txden, HIGH); // master 
  PWM_Mode_Setup();

  //set up ultrasonic sensors
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);

  stay_middle();
}

//read sensor data
void SonarSensor(int trigPin,int echoPin)
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
}

void get_current_state(){
  SonarSensor(trigPin1, echoPin1);
  LeftSensor = distance;
  SonarSensor(trigPin2, echoPin2);
  MiddleSensor = distance;
  SonarSensor(trigPin3, echoPin3);
  RightSensor = distance;

  int thr = 10; //threshold considered close, in centimeter
  int count_trig = 0; //count how many sensors are triggered
  int state_sum = 0; //left sensor:-2, middle sensor: 0, right sensor: 2
  if (LeftSensor < thr){count_trig+=1; state_sum-=2;};
  if (MiddleSensor < thr){count_trig+=1; };
  if (RightSensor < thr){count_trig+=1; state_sum+=2;};

  if(count_trig==0){ //no one's around, maybe in the future a new state
    current_state = 0;
  }
  else if(count_trig==1){
    current_state = state_sum;
  }
  else if(count_trig==2){
    current_state=state_sum/2;
    if(current_state==0){
      if(LeftSensor<RightSensor){
        current_state=-2;
      }
      else{
        current_state=2;
      }
    }
  }
  else{
    current_state=0;
  }
}


void blink(){
    write_frame(7); //middle position
    delay(30); 
    for (int i = 1; i < 5; i++){
      write_frame_blink_new(i);
      delay(30);
    }
    delay(60);
    for (int i = 3; i >= 1; i--){
      write_frame_blink_new(i);
      delay(30 + (5-i)*6);
    }
}

void stay_middle(){
    write_frame(7); //middle position
    delay(500); 
}

void roll_eye(int prev_state, int current_state){
  
  int prev_position = state_position_list[prev_state+2];
  int current_positon = state_position_list[current_state+2];
  if (prev_position > current_positon){ //roll from left to right
    for (int i = prev_position; i >= current_positon; i--){
      write_frame(i);
      delay(30);
    }
  }
  else if (prev_position < current_positon){ //roll from right to left
    for (int i = prev_position; i <= current_positon; i++){
      write_frame(i);
      delay(30);
    }
  }
  else{
    ;
//    delay(100); //stay in the previous position for a bit
  }
  
}

void middle_to_left(){
  //  eye rolling...
  for (int i = 7; i < 15; i++){
    write_frame(i);
    delay(eye_delay_list[i]);
  }
}

void stay_left(){
    write_frame(14);
    delay(500);
}

void left_to_middle(){
  for (int i = 14; i > 6; i--){
    write_frame(i);
    delay(eye_delay_list[i]);
  }
}

void loop() { 

  blink();

//    prev_state = current_state;
//    get_current_state();
//    roll_eye(prev_state, current_state);
//

  

//  write_white();
//  delay(5000);
//
//  //0: middle, 1:left
//  prev_state = current_state;
//  if (Distance > 0){
//    current_state = 1;
//  }
//  else{
//    current_state = 0;
//  }
//  if (current_state==1 and prev_state == 1){
//    stay_left();
//  }
//  if (current_state==0 and prev_state == 0){
//    stay_middle();
//  }
//  if (current_state==0 and prev_state == 1){
//    left_to_middle();
//  }
//  if (current_state==1 and prev_state == 0){
//    middle_to_left();
//  }

  
//  //if close, blink
//  if (Distance > 0){
//    blink();
//  }
//  else{
//    stay_middle();
//  }

////  eye rolling...
//  for (int i = 0; i < 15; i++){
//    write_frame(i);
//    delay(eye_delay_list[i]);
//  }
//  for (int i = 13; i > 0; i--){
//    write_frame(i);
//    delay(eye_delay_list[i]);
//  }

//  write_frame(7);
//  delay(1000);
//  for (int i = 1; i < 7; i++){
//    write_frame_blink(i);
//    delay(30);
//  }
//  for (int i = 5; i >= 1; i--){
//    write_frame_blink(i);
//    delay(30 + (5-i)*6);
//  }

//  write_frame(7);
//  delay(1000);
//  for (int i = 1; i < 5; i++){
//    write_frame_blink_new(i);
//    delay(30);
//  }
//  delay(1000);
//  for (int i = 3; i >= 1; i--){
//    write_frame_blink_new(i);
//    delay(30 + (5-i)*6);
//  }
}
